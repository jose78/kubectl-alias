package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	collection "github.com/jose78/go-collections"
	"github.com/xwb1989/sqlparser"

	"github.com/genjidb/genji"
	"github.com/genjidb/genji/document"
	"github.com/genjidb/genji/types"
)

func main() {


	rs :=   `{
            "apiVersion": "apps/v1",
            "kind": "ReplicaSet",
            "metadata": {
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "creationTimestamp": "2024-10-23T06:50:36Z",
                "generation": 2,
                "labels": {
                    "app": "test",
                    "pod-template-hash": "5746d4c59f"
                },
                "name": "test-5746d4c59f",
                "namespace": "default",
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "blockOwnerDeletion": true,
                        "controller": true,
                        "kind": "Deployment",
                        "name": "test",
                        "uid": "f2154744-8908-4389-bae9-9a4bdd748f35"
                    }
                ],
                "resourceVersion": "65791",
                "uid": "325397bc-5d4d-4057-a846-c0a00639c3a0"
            },
            "spec": {
                "replicas": 0,
                "selector": {
                    "matchLabels": {
                        "app": "test",
                        "pod-template-hash": "5746d4c59f"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "test",
                            "pod-template-hash": "5746d4c59f"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "image": "nginx",
                                "imagePullPolicy": "Always",
                                "name": "nginx",
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 0
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "ReplicaSet",
            "metadata": {
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "2"
                },
                "creationTimestamp": "2024-10-23T09:45:18Z",
                "generation": 1,
                "labels": {
                    "app": "test",
                    "pod-template-hash": "b4b6cf8f6"
                },
                "name": "test-b4b6cf8f6",
                "namespace": "default",
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "blockOwnerDeletion": true,
                        "controller": true,
                        "kind": "Deployment",
                        "name": "test",
                        "uid": "f2154744-8908-4389-bae9-9a4bdd748f35"
                    }
                ],
                "resourceVersion": "65783",
                "uid": "cdda94dc-5140-45f0-a2b5-755ef21802de"
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "test",
                        "pod-template-hash": "b4b6cf8f6"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "test",
                            "pod-template-hash": "b4b6cf8f6"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "name",
                                        "value": "test"
                                    }
                                ],
                                "image": "nginx",
                                "imagePullPolicy": "Always",
                                "name": "nginx",
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "fullyLabeledReplicas": 1,
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1
            }
        }` 
	
	
	pods := `{
        "apiVersion": "v1",
        "kind": "Pod",
        "metadata": {
            "creationTimestamp": "2024-10-23T09:45:18Z",
            "generateName": "test-b4b6cf8f6-",
            "labels": {
                "app": "test",
                "pod-template-hash": "b4b6cf8f6"
            },
            "name": "test-b4b6cf8f6-nsrsw",
            "namespace": "default",
            "ownerReferences": [
                {
                    "apiVersion": "apps/v1",
                    "blockOwnerDeletion": true,
                    "controller": true,
                    "kind": "ReplicaSet",
                    "name": "test-b4b6cf8f6",
                    "uid": "cdda94dc-5140-45f0-a2b5-755ef21802de"
                }
            ],
            "resourceVersion": "902116",
            "uid": "fbea3800-2cf2-4216-b109-ad9fb3192bc9"
        },
        "spec": {
            "containers": [
                {
                    "env": [
                        {
                            "name": "name",
                            "value": "test"
                        }
                    ],
                    "image": "nginx",
                    "imagePullPolicy": "Always",
                    "name": "nginx",
                    "resources": {},
                    "terminationMessagePath": "/dev/termination-log",
                    "terminationMessagePolicy": "File",
                    "volumeMounts": [
                        {
                            "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                            "name": "kube-api-access-rphdr",
                            "readOnly": true
                        }
                    ]
                }
            ],
            "dnsPolicy": "ClusterFirst",
            "enableServiceLinks": true,
            "nodeName": "kind-control-plane",
            "preemptionPolicy": "PreemptLowerPriority",
            "priority": 0,
            "restartPolicy": "Always",
            "schedulerName": "default-scheduler",
            "securityContext": {},
            "serviceAccount": "default",
            "serviceAccountName": "default",
            "terminationGracePeriodSeconds": 30,
            "tolerations": [
                {
                    "effect": "NoExecute",
                    "key": "node.kubernetes.io/not-ready",
                    "operator": "Exists",
                    "tolerationSeconds": 300
                },
                {
                    "effect": "NoExecute",
                    "key": "node.kubernetes.io/unreachable",
                    "operator": "Exists",
                    "tolerationSeconds": 300
                }
            ],
            "volumes": [
                {
                    "name": "kube-api-access-rphdr",
                    "projected": {
                        "defaultMode": 420,
                        "sources": [
                            {
                                "serviceAccountToken": {
                                    "expirationSeconds": 3607,
                                    "path": "token"
                                }
                            },
                            {
                                "configMap": {
                                    "items": [
                                        {
                                            "key": "ca.crt",
                                            "path": "ca.crt"
                                        }
                                    ],
                                    "name": "kube-root-ca.crt"
                                }
                            },
                            {
                                "downwardAPI": {
                                    "items": [
                                        {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            },
                                            "path": "namespace"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            ]
        },
        "status": {
            "conditions": [
                {
                    "lastProbeTime": null,
                    "lastTransitionTime": "2024-10-23T09:45:18Z",
                    "status": "True",
                    "type": "Initialized"
                },
                {
                    "lastProbeTime": null,
                    "lastTransitionTime": "2024-10-30T21:17:51Z",
                    "status": "True",
                    "type": "Ready"
                },
                {
                    "lastProbeTime": null,
                    "lastTransitionTime": "2024-10-30T21:17:51Z",
                    "status": "True",
                    "type": "ContainersReady"
                },
                {
                    "lastProbeTime": null,
                    "lastTransitionTime": "2024-10-23T09:45:18Z",
                    "status": "True",
                    "type": "PodScheduled"
                }
            ],
            "containerStatuses": [
                {
                    "containerID": "containerd://f50e463379cbbfd75ed79ad5ad59d99794c7bb9437c3076c1ab257732b1022a5",
                    "image": "docker.io/library/nginx:latest",
                    "imageID": "docker.io/library/nginx@sha256:28402db69fec7c17e179ea87882667f1e054391138f77ffaf0c3eb388efc3ffb",
                    "lastState": {
                        "terminated": {
                            "containerID": "containerd://ec6d920c61f05618d85b202b80fd5817d5a9501a1ea465010c75c3a0dd60215d",
                            "exitCode": 255,
                            "finishedAt": "2024-10-30T21:17:42Z",
                            "reason": "Unknown",
                            "startedAt": "2024-10-23T21:49:15Z"
                        }
                    },
                    "name": "nginx",
                    "ready": true,
                    "restartCount": 2,
                    "started": true,
                    "state": {
                        "running": {
                            "startedAt": "2024-10-30T21:17:51Z"
                        }
                    }
                }
            ],
            "hostIP": "172.18.0.2",
            "phase": "Running",
            "podIP": "10.244.0.4",
            "podIPs": [
                {
                    "ip": "10.244.0.4"
                }
            ],
            "qosClass": "BestEffort",
            "startTime": "2024-10-23T09:45:18Z"
        }
    },
    {
        "apiVersion": "v1",
        "kind": "Pod",
        "metadata": {
            "creationTimestamp": "2024-10-23T09:45:18Z",
            "generateName": "test-b4b6cf8f6-",
            "labels": {
                "app": "test",
                "pod-template-hash": "b4b6cf8f6"
            },
            "name": "test-2",
            "namespace": "default",
            "ownerReferences": [
                {
                    "apiVersion": "apps/v1",
                    "blockOwnerDeletion": true,
                    "controller": true,
                    "kind": "ReplicaSet",
                    "name": "test-b4b6cf8f6",
                    "uid": "cdda94dc-5140-45f0-a2b5-755ef21802de"
                }
            ],
            "resourceVersion": "902116",
            "uid": "fbea3800-2cf2-4216-b109-ad9fb3192bc9"
        },
        "spec": {
            "containers": [
                {
                    "env": [
                        {
                            "name": "name",
                            "value": "test"
                        }
                    ],
                    "image": "nginx",
                    "imagePullPolicy": "Always",
                    "name": "nginx",
                    "resources": {},
                    "terminationMessagePath": "/dev/termination-log",
                    "terminationMessagePolicy": "File",
                    "volumeMounts": [
                        {
                            "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                            "name": "kube-api-access-rphdr",
                            "readOnly": true
                        }
                    ]
                },
                {
                    "env": [
                        {
                            "name": "name",
                            "value": "test"
                        }
                    ],
                    "image": "nginx-2",
                    "imagePullPolicy": "Always",
                    "name": "nginx-2",
                    "resources": {},
                    "terminationMessagePath": "/dev/termination-log",
                    "terminationMessagePolicy": "File",
                    "volumeMounts": [
                        {
                            "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                            "name": "kube-api-access-rphdr",
                            "readOnly": true
                        }
                    ]
                }
            ],
            "dnsPolicy": "ClusterFirst",
            "enableServiceLinks": true,
            "nodeName": "kind-control-plane",
            "preemptionPolicy": "PreemptLowerPriority",
            "priority": 0,
            "restartPolicy": "Always",
            "schedulerName": "default-scheduler",
            "securityContext": {},
            "serviceAccount": "default",
            "serviceAccountName": "default",
            "terminationGracePeriodSeconds": 30,
            "tolerations": [
                {
                    "effect": "NoExecute",
                    "key": "node.kubernetes.io/not-ready",
                    "operator": "Exists",
                    "tolerationSeconds": 300
                },
                {
                    "effect": "NoExecute",
                    "key": "node.kubernetes.io/unreachable",
                    "operator": "Exists",
                    "tolerationSeconds": 300
                }
            ],
            "volumes": [
                {
                    "name": "kube-api-access-rphdr",
                    "projected": {
                        "defaultMode": 420,
                        "sources": [
                            {
                                "serviceAccountToken": {
                                    "expirationSeconds": 3607,
                                    "path": "token"
                                }
                            },
                            {
                                "configMap": {
                                    "items": [
                                        {
                                            "key": "ca.crt",
                                            "path": "ca.crt"
                                        }
                                    ],
                                    "name": "kube-root-ca.crt"
                                }
                            },
                            {
                                "downwardAPI": {
                                    "items": [
                                        {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            },
                                            "path": "namespace"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            ]
        },
        "status": {
            "conditions": [
                {
                    "lastProbeTime": null,
                    "lastTransitionTime": "2024-10-23T09:45:18Z",
                    "status": "True",
                    "type": "Initialized"
                },
                {
                    "lastProbeTime": null,
                    "lastTransitionTime": "2024-10-30T21:17:51Z",
                    "status": "True",
                    "type": "Ready"
                },
                {
                    "lastProbeTime": null,
                    "lastTransitionTime": "2024-10-30T21:17:51Z",
                    "status": "True",
                    "type": "ContainersReady"
                },
                {
                    "lastProbeTime": null,
                    "lastTransitionTime": "2024-10-23T09:45:18Z",
                    "status": "True",
                    "type": "PodScheduled"
                }
            ],
            "containerStatuses": [
                {
                    "containerID": "containerd://f50e463379cbbfd75ed79ad5ad59d99794c7bb9437c3076c1ab257732b1022a5",
                    "image": "docker.io/library/nginx:latest",
                    "imageID": "docker.io/library/nginx@sha256:28402db69fec7c17e179ea87882667f1e054391138f77ffaf0c3eb388efc3ffb",
                    "lastState": {
                        "terminated": {
                            "containerID": "containerd://ec6d920c61f05618d85b202b80fd5817d5a9501a1ea465010c75c3a0dd60215d",
                            "exitCode": 255,
                            "finishedAt": "2024-10-30T21:17:42Z",
                            "reason": "Unknown",
                            "startedAt": "2024-10-23T21:49:15Z"
                        }
                    },
                    "name": "nginx",
                    "ready": true,
                    "restartCount": 2,
                    "started": true,
                    "state": {
                        "running": {
                            "startedAt": "2024-10-30T21:17:51Z"
                        }
                    }
                }
            ],
            "hostIP": "172.18.0.2",
            "phase": "Running",
            "podIP": "10.244.0.4",
            "podIPs": [
                {
                    "ip": "10.244.0.4"
                }
            ],
            "qosClass": "BestEffort",
            "startTime": "2024-10-23T09:45:18Z"
        }
    }
`

	// Creamos una base de datos en memoria
	db, err := genji.Open(":memory:")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// Creamos una tabla para almacenar los usuarios en formato JSON
	err = db.Exec("CREATE TABLE pods")
	if err != nil {
		log.Fatal(err)
	}
	err = db.Exec("CREATE TABLE rs")
	if err != nil {
		log.Fatal(err)
	}
	// Insertamos el documento JSON en la tabla de usuarios
	query := fmt.Sprintf("INSERT INTO pods VALUES %s", pods)
	err = db.Exec(query)
	if err != nil {
		log.Fatal(err)
	}

		// Insertamos el documento JSON en la tabla de usuarios
		query = fmt.Sprintf("INSERT INTO rs VALUES %s", rs)
		err = db.Exec(query)
		if err != nil {
			log.Fatal(err)
		}

	// Consultamos todos los usuarios mayores de 20 años
	res, _ := db.Query("SELECT p.metadata.name FROM pods AS p WHERE p.kind = ?", "Pod")

	defer res.Close()

	// Iterar sobre los resultados
	err = res.Iterate(func(d types.Document) error {
		var name string

		// Escanear los campos específicos
		err := document.Scan(d, &name)
		if err != nil {
			return err
		}

		fmt.Printf("Name: %s\n", name)
		return nil
	})

	if err != nil {
		log.Fatal(err)
	}

}

func mapper(item string) any {
	stringSplited := strings.Split(item, "=")
	value := ""
	key := stringSplited[0]
	if len(stringSplited) > 1 {
		value = stringSplited[1]
	}
	return collection.Touple{Key: key, Value: value}
}

// function to extract the query to be executed
func selectQuery(nameVar string) (string, error) {
	envNameVar := fmt.Sprintf("K_FCK_%s", strings.ToUpper(nameVar))
	var predicate collection.Predicate[collection.Touple] = func(item collection.Touple) bool {
		result := strings.Compare(item.Key.(string), envNameVar) == 0
		return result
	}

	lstKeysEnv := os.Environ()
	mapUpdated := map[string]string{}
	collection.Map(mapper, lstKeysEnv, mapUpdated)
	result := map[string]string{}
	collection.Filter(predicate, mapUpdated, result)

	if len(result) == 0 {
		return "", fmt.Errorf(`Error: not found env var %s`, envNameVar)
	} else {
		return result[envNameVar], nil
	}
}

type sqlContainer struct {
	sqlSelect map[string]string
	sqlFrom   []string
	sqlWhere  string
}

func evaluateQuery(query string) (sqlContainer, error) {
	stmt, err := sqlparser.Parse(query)
	if err != nil {
		log.Fatalf("Error al parsear la consulta SQL: %v", err)
	}

	sql := sqlContainer{}
	switch stmt := stmt.(type) {
	case *sqlparser.Select:
		cols := map[string]string{}
		for _, col := range stmt.SelectExprs {
			col := sqlparser.String(col)
			var key string
			var value string
			if upperNameItemSelect := strings.ToUpper(col); strings.Contains(upperNameItemSelect, " AS ") {
				key = strings.Split(upperNameItemSelect, " AS ")[0]
				value = strings.Split(upperNameItemSelect, " AS ")[1]
			} else {
				colSplited := strings.Split(col, ".")
				key = colSplited[len(colSplited)-1]
				value = col
			}
			cols[key] = value
			sql.sqlSelect = cols
		}
		sql.sqlFrom = strings.Split(sqlparser.String(stmt.From), ",")
		sql.sqlWhere = strings.ReplaceAll(sqlparser.String(stmt.Where), " where ", "")
	default:
		return sqlContainer{}, fmt.Errorf("")
	}
	return sql, nil
}
